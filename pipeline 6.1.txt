pipeline{
    agent any
    
    stages{
        stage("build"){
            steps{
                echo "we use Maven to help build and compile java based programs to help keep a streamlined developpment process   "
            }
        }
        stage("unit and integration tests"){
            steps{
                echo "we will use JUnit to test our code for any errors and intergration errors as well "
            }
             post
            {
                success
                {
                    mail to: "alexjreid15@gmail.com",
                    subject: "build status email",
                    body: "build was successfull"
                    
                }
            }
        }
       
        stage("code analysis"){
            steps{
                echo "we will use sonarqube to help analyse our code further and make sure it meets industry standards"
              
            }
        }
        stage("security scan"){
            steps{
                echo "sonarqube can also perform the security tests and  vulnerabilities "
            }
            post
            {
                success
                {
                    mail to: "alexjreid15@gmail.com",
                    subject: "build status email",
                    body: "build was successfull"
                    
                }
            }


        }
        stage("Deploy to staging"){
            steps{
                echo "deploying to staging server AWS EC2 instence"
            }
        }
        stage("Integration tests and staging"){
            steps{
                sleep 10
                echo "integration tests on staging, running tests to make sure it works like in production"
            }
        }
        stage("deploy to production"){
            steps{
                echo " deploying to  production server AWS EC2 instance"     
         script {
                    def logFile = new File("/var/jenkins_home/jobs/6.1/builds/build.log")
                    logFile.write(currentBuild.rawBuild.getLog(10000).join('\n'))
                }
            }
             post
            {
                always
                {
                    // Archive the log file from the workspace
                    archiveArtifacts artifacts: 'build.log', allowEmptyArchive: true

                    // Send email with the archived log file as an attachment
                    emailext (
                        to: "alexjreid15@gmail.com",
                        subject: "Build Status Email",
                        body: "The build was successful. Please find the log attached.",
                        attachmentsPattern: 'build.log'
                }
            }
        }
       
        
    }
}
